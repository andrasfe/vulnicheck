#!/usr/bin/env python
"""
Test client that specifically checks for vulnerabilities in Python modules.
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from typing import Any


class VulnerabilityTestClient:
    """MCP client for testing vulnerability checks."""

    def __init__(self):
        self.process = None
        self.message_id = 0
        self.initialized = False

    def log(self, message: str, level: str = "INFO"):
        """Log with timestamp and level."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] [{level}] {message}")

    async def start_server(self):
        """Start the MCP server."""
        self.log("Starting VulniCheck server...")

        self.process = await asyncio.create_subprocess_exec(
            sys.executable,
            "-m",
            "vulnicheck.server",
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )

        # Monitor stderr in background
        asyncio.create_task(self._monitor_stderr())

        await asyncio.sleep(2)  # Give server time to start
        self.log("Server started")

    async def _monitor_stderr(self):
        """Monitor server stderr output."""
        while True:
            line = await self.process.stderr.readline()
            if not line:
                break
            self.log(f"[SERVER] {line.decode().rstrip()}", "STDERR")

    async def send_request(self, method: str, params: dict | None = None) -> dict[str, Any]:
        """Send JSON-RPC request and get response."""
        self.message_id += 1

        request = {
            "jsonrpc": "2.0",
            "id": self.message_id,
            "method": method,
            "params": params or {},
        }

        # Send request
        request_str = json.dumps(request) + "\n"
        self.log(f"→ Request: {method}", "REQUEST")
        self.log(
            f"  Params: {json.dumps(params, indent=2) if params else 'None'}", "REQUEST"
        )

        self.process.stdin.write(request_str.encode())
        await self.process.stdin.drain()

        # Read response
        response_line = await self.process.stdout.readline()
        response: dict[str, Any] = json.loads(response_line.decode())

        if "error" in response:
            self.log(f"← Error: {response['error']['message']}", "ERROR")
        else:
            self.log("← Response received", "RESPONSE")

        return response

    async def initialize(self):
        """Initialize MCP connection."""
        self.log("Initializing MCP connection...")

        response = await self.send_request(
            "initialize",
            {
                "protocolVersion": "1.0",
                "capabilities": {},
                "clientInfo": {"name": "vulnerability-test-client", "version": "1.0.0"},
            },
        )

        if "result" in response:
            self.log("Initialization successful", "SUCCESS")
            self.log(
                f"Server: {response['result']['serverInfo']['name']} v{response['result']['serverInfo']['version']}"
            )

            # Send initialized notification (without expecting response)
            notification = {"jsonrpc": "2.0", "method": "notifications/initialized"}
            self.process.stdin.write((json.dumps(notification) + "\n").encode())
            await self.process.stdin.drain()
            self.log("Sent initialized notification")
            self.initialized = True

            # Give server time to process
            await asyncio.sleep(0.5)

        return response

    async def check_package_vulnerabilities(self, package: str, version: str | None = None):
        """Check a specific package for vulnerabilities."""
        self.log(f"\n{'=' * 60}")
        self.log(
            f"Checking vulnerabilities for: {package}"
            + (f" v{version}" if version else "")
        )
        self.log(f"{'=' * 60}")

        response = await self.send_request(
            "tools/call",
            {
                "name": "check_package_vulnerabilities",
                "arguments": {
                    "package_name": package,
                    "version": version,
                    "include_details": True,
                },
            },
        )

        if "result" in response and "content" in response["result"]:
            for content in response["result"]["content"]:
                if content.get("type") == "text":
                    print("\n" + "─" * 60)
                    print(content["text"])
                    print("─" * 60 + "\n")

        return response

    async def run_vulnerability_tests(self):
        """Run various vulnerability tests."""
        # Test 1: Known vulnerable package with specific version
        await self.check_package_vulnerabilities("django", "2.2.0")

        # Test 2: Another known vulnerable package
        await self.check_package_vulnerabilities("flask", "0.12.2")

        # Test 3: Check numpy old version
        await self.check_package_vulnerabilities("numpy", "1.16.0")

        # Test 4: Check a likely safe recent package
        await self.check_package_vulnerabilities("requests", "2.31.0")

        # Test 5: Check without specific version
        await self.check_package_vulnerabilities("pillow")

    async def get_cve_details(self, cve_id: str):
        """Get details for a specific CVE."""
        self.log(f"\n{'=' * 60}")
        self.log(f"Getting details for: {cve_id}")
        self.log(f"{'=' * 60}")

        response = await self.send_request(
            "tools/call", {"name": "get_cve_details", "arguments": {"cve_id": cve_id}}
        )

        if "result" in response and "content" in response["result"]:
            for content in response["result"]["content"]:
                if content.get("type") == "text":
                    print("\n" + "─" * 60)
                    print(content["text"])
                    print("─" * 60 + "\n")

        return response

    async def close(self):
        """Close connection and stop server."""
        self.log("\nClosing connection...")

        if self.process:
            self.process.terminate()
            await self.process.wait()

        self.log("Server stopped")


async def main():
    """Run the vulnerability test client."""
    print("\n" + "=" * 80)
    print("VulniCheck Vulnerability Test Client")
    print("=" * 80 + "\n")

    client = VulnerabilityTestClient()

    try:
        # Start and initialize
        await client.start_server()
        await client.initialize()

        # Run vulnerability checks
        await client.run_vulnerability_tests()

        # Test specific CVE lookup
        await client.get_cve_details("CVE-2021-33203")

    except Exception as e:
        client.log(f"Fatal error: {e}", "ERROR")
        import traceback

        traceback.print_exc()
    finally:
        await client.close()

    print("\n" + "=" * 80)
    print("Test completed")
    print("=" * 80)


if __name__ == "__main__":
    if not os.environ.get("VIRTUAL_ENV"):
        print("⚠️  Warning: Not in virtual environment")
        print("   Run: source .venv/bin/activate\n")

    asyncio.run(main())
